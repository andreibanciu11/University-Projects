l1b 

; pargurg_st(l1l2...ln, nrNoduri, nrMuchii) = 
; = nil, if n = 0
; = nil, if nrNoduri = 1 + nrMuchii
; = {l1} U {l2} U parcurg_st(l3...ln, nrNoduri + 1, l2 + nrMuchii), otherwise

(defun parcurg_st (l nrNoduri nrMuchii)
  (cond
    ((null l) nil)
    ((= nrNoduri ( + 1 nrMuchii)) nil)
    (t (cons (car l) (cons (cadr l) (parcurg_st (cddr l) (+ 1 nrNoduri) (+ (cadr l) nrMuchii)))))
  )
)


; parcurg_dr(l1l2...ln, nrNoduri, nrMuchii) =
; = nil, if n = 0
; = l1l2...ln, if nrNoduri = 1 + nrMuchii
; = parcurg_dr(l3...ln, nrNoduri + 1, nrMuchii + l2), otherwise


(defun parcurg_dr (l nrNoduri nrMuchii)
  (cond
    ((null l) nil)
    ((= nrNoduri (+ 1 nrMuchii)) l)
    (t (parcurg_dr (cddr l) (+ 1 nrNoduri) (+ (cadr l) nrMuchii)))
  )
)


;stang(l1l2...ln) = 
; = parcurg_st(l3...ln, 0,0)

(defun stang(l)
  (parcurg_st (cddr l) 0 0)
)


;drept(l1l2...ln) =
; = parcurg_dr(l3...ln, 0, 0)

(defun drept(l)
  (parcurg_dr (cddr l) 0 0)
)


; myAppend(l1l2...ln, p1p2...pm) = 
; = p1p2...pm, if n = 0
; = {l1} U myAppend(l2...ln, p1p2...pm), otherwise

(defun myAppend(l p)
  (cond
    ((null l) p)
    (t (cons (car l) (myAppend (cdr l) p)))
  )
)


; inorder(l1l2...ln) = 
; = nil, if n = 0
; = myAppend(inorder(stang(l1l2...ln)), myAppend(list(l1), inorder(drept(l1l2...ln)))), otherwise

(defun inorder (l)
  (cond
    ((null l) nil)
    (t (myAppend (inorder (stang l)) (myAppend (list (car l)) (inorder (drept l)))))
  )
)

(print (inorder '(A 2 B 0 C 0)))

l2

; 6. Write a function that returns the maximum of numeric atoms in a list, at any level


; myMax(a, b) = 
; = nil, if a is not a number and b is not a number
; = b, if a is not a number
; = a, if b is not a number
; = a, if a > b
; = b, otherwise

(defun myMax(a b)
  (cond
    ((and (not (numberp a)) (not (numberp b))) nil)
    ((not (numberp a)) b)
    ((not (numberp b)) a)
    ((> a b) a)
    (t b)
  )
)


(defun maxList(l)
  (cond
    ((null l) nil)
    (t (myMax (car l) (maxList (cdr l))))
  )
)

(defun maxForList(l)
  (cond
    ((numberp l) l)
    ((atom l) nil)
    (t (apply #'maxList (list (mapcar #'maxForList l))))
  )
)

(print (maxForList '(1 2 3 4 5 6 7 8 9 A B C D E F G)))
